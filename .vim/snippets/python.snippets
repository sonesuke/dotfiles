# import object
snippet from
	from ${1:module} import ${2:object}
# New Property
snippet @p
	@property
	def ${1:property}(self):
	    ${2:pass}
# New Class
snippet class
	class ${1:ClassName}:
	    ${2:pass}
# py.test
snippet pyt
	import pytest
snippet raiset
	with pytest.raises(${1:Exception}):
	    ${2:pass}
snippet parat
	@pytest.mark.parametrize(
	    (${1:args}),
	    [
	        ${2:parameters},
	    ]
	)
snippet aeq
	assert ${1:lhs} == ${2:rhs}
snippet @wh
	@when(${1:method}, (${2:args}, ))
	def $1(self, ${3}):
		${4:pass}
# Lambda
snippet ld
	lambda ${1:vars}: ${2:action}
snippet .
	self.
snippet imp
	import ${1:module}

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet defi
	def __init__(self${1:}):
		${2:pass}
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}${3}):
		${4}
snippet deft
	def test_${1:method}():
	    ${2:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# New Class method
snippet @class
	@classmethod
	def ${1:name}(cls${2}):
		${3:pass}
# for
snippet for
	for ${1} in ${2}:
		${3}
